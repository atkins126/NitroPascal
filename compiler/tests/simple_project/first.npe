project 'First_Test_Project';

/.
  {$program-type output-type output-subtype[ output-extension][ output-path]}
  defines what type of compilation can be done:
  you can define multiple compilation types in single project

  supported output-type:
    - Windows(32/64)
    - Linux(32/64)
    - Android(32/64)
    - WebAssembly(32/64)

  supported output-subtype:
    - GUI     - means program that uses operating system Graphic User Interface like in eg.: Windows,
    - CONSOLE - means program that outputs to the operating system console (if available),
    - DLL     - dynamically loaded library,
    - TEXT    - text format

  extension will be given to output of compiler, eg.:
    if Windows(32/64) is defined than extension will be '.exe' or '.dll'
    if Linux(32/64) is defined than extension will be '.elf' or '.so'
    if Android(32/64) is defined than extension will be '.apk'
    if WebAssembly is defined than extension will be '.wasm' or '.wat'

  custom extension can be set by declaring {$extension '.ext'} for every project
  example: {$program-type Windows32 DLL {$extension '.dll'}}
    or short form {$program-type Windows32 DLL '.dll'}
    or for every project type using concatenated version {$extension '* .dll * *'}
  extension that will not change are not required to specify, so usage of * is not required also
  but if you want to specify extension using {$extension } that is second or third or fourth, but not changing
  previous ones, than you must use * to let complier know what you are up to
./

{$program-type Windows32 GUI}
{$program-type Windows32 DLL '.dll'}
{$program-type Android64 GUI}
{$program-type WebAssembly DLL}

/.
  {$search-path[ recursive] 'directory'}
  defines path(s) that project can use to search imported code files
  you can define multiple search paths for project by repeating this directive as many times as is needed

  defining search path adds it to the project internal list of paths
  single directive adds single choosen path without looking into specified directory
  to automatically add children directories inside specified path you may use optional switch 'recursive'

  specified path can be of type:
    - relative  - to project directory, using '.\\' or '..\\' specifier to go in or out of project directory,
    - absolute - specifying full path to desired directory

  compiler checks if specified path exists and produces error if path is not existant or not reachable

  you can modify compiler behavior by supplaing additional directive:
  {$warn-on-path-error enabled}
  which disables underlying path error message and produces only warning

  to disable previously enabled directive, you should use directive:
  {$warn-on-path-error disabled}
./

{$search-path '..\\..\\concepts\\'}
{$search-path recursive '..\\..\\concepts\\'}

imports
  // imports section
  first_main;
  
{. OK, this is a multi-line comment. It can be one line eighter. .}
{.
  But for now we need to test this compiler at every possible way we could imagine.
  So to do this we need some test cases, like this comment.
.}

(*
  After that there will be one more comment to test.
*)

//type
// Enum = (eiOne, eiTwo, eiThree, eiFour, eiFive);

var
  SomeString: String;
  FirstProgram: Boolean;
  ErrorMessage: String;
  SomeEnum: Enum = eiThree;

//const
//  SomeConst: Boolean = True;
//  SomeOtherConst1: Boolean = True;
//  SomeOtherConst2: Boolean = True;

initialization
  // initialization code
  if ConsoleAvailable then
    ConsoleTitle := %project-name%;
  //
  FirstProgram := True;
  //
  if not FirstProgram then {
    // nothing here
  };
  //
  if 1 + 2 = 3 + 4 then {
    if ConsoleAvailable then {
      Writeln('We are testing our compiler.'#13#10'\rIf everything will be ok, than\rmaybe we make a change in programming in Pascal.');
      Writeln('This line shows that we are not limited by line length and string literal length like in Delphi where you can not use lines that are longer than 255 characters. In NitroPascal You can have lines that are 2GB characters long. We are not sure why You may need it, but when we can have it, than why not ?');
    };
  } else {
    ErrorMessage := 'This is expected !';
  };
  //
  if ConsoleAvailable and (Length(ErrorMessage) > 0) then {
      Writeln('We are testing our compiler.'#13#10'\rIf everything will be ok, than\rmaybe we make a change in programming in Pascal.');
      Writeln('This line shows that we are not limited by line length and string literal length like in Delphi where you can not use lines that are longer than 255 characters. In NitroPascal You can have lines that are 2GB characters long. We are not sure why You may need it, but when we can have it, than why not ?');
  };
  //
  if SomeConst then {
    // maybe some statements
    SomeConst := False;
    SomeOtherConst1 := False;
    SomeOtherConst2 := False;
  } else // test comments in various places, @TODO: use other types of comments as well
  if SomeOtherConst1 then {
    // maybe some statements
    SomeConst := False;
    SomeOtherConst1 := False;
    SomeOtherConst2 := False;
  } // else in next line, because we commented here
  else if SomeOtherConst2 then {
    // maybe some statements
    SomeConst := False;
    SomeOtherConst1 := False;
    SomeOtherConst2 := False;
  } else {
    // maybe some statements
    SomeConst := False;
    SomeOtherConst1 := False;
    SomeOtherConst2 := False;
  };
  //
  case 2 > 1 {
    if True: {
    };
    if False: {
    };
  };
  //
  case SomeEnum {
    if .eiOne: {
    };
    if .eiTwo: {
    };
    if .eiThree: {
    };
    if .eiFour: {
    };
    if .eiFive: {
    };
  };

finalization
  // finalization code
  for i := 0; i < 10; i += 1 {
    // loop
  };

begin
  // program initialization code
  SomeString := 'this is a text';
  if ConsoleAvailable then {
    Writeln(SomeString);
    ConsolePause;
  };
end.